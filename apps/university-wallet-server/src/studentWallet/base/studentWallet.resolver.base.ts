/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { StudentWallet } from "./StudentWallet";
import { StudentWalletCountArgs } from "./StudentWalletCountArgs";
import { StudentWalletFindManyArgs } from "./StudentWalletFindManyArgs";
import { StudentWalletFindUniqueArgs } from "./StudentWalletFindUniqueArgs";
import { CreateStudentWalletArgs } from "./CreateStudentWalletArgs";
import { UpdateStudentWalletArgs } from "./UpdateStudentWalletArgs";
import { DeleteStudentWalletArgs } from "./DeleteStudentWalletArgs";
import { TransactionFindManyArgs } from "../../transaction/base/TransactionFindManyArgs";
import { Transaction } from "../../transaction/base/Transaction";
import { StudentWalletService } from "../studentWallet.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => StudentWallet)
export class StudentWalletResolverBase {
  constructor(
    protected readonly service: StudentWalletService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "StudentWallet",
    action: "read",
    possession: "any",
  })
  async _studentWalletsMeta(
    @graphql.Args() args: StudentWalletCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [StudentWallet])
  @nestAccessControl.UseRoles({
    resource: "StudentWallet",
    action: "read",
    possession: "any",
  })
  async studentWallets(
    @graphql.Args() args: StudentWalletFindManyArgs
  ): Promise<StudentWallet[]> {
    return this.service.studentWallets(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => StudentWallet, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "StudentWallet",
    action: "read",
    possession: "own",
  })
  async studentWallet(
    @graphql.Args() args: StudentWalletFindUniqueArgs
  ): Promise<StudentWallet | null> {
    const result = await this.service.studentWallet(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => StudentWallet)
  @nestAccessControl.UseRoles({
    resource: "StudentWallet",
    action: "create",
    possession: "any",
  })
  async createStudentWallet(
    @graphql.Args() args: CreateStudentWalletArgs
  ): Promise<StudentWallet> {
    return await this.service.createStudentWallet({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => StudentWallet)
  @nestAccessControl.UseRoles({
    resource: "StudentWallet",
    action: "update",
    possession: "any",
  })
  async updateStudentWallet(
    @graphql.Args() args: UpdateStudentWalletArgs
  ): Promise<StudentWallet | null> {
    try {
      return await this.service.updateStudentWallet({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StudentWallet)
  @nestAccessControl.UseRoles({
    resource: "StudentWallet",
    action: "delete",
    possession: "any",
  })
  async deleteStudentWallet(
    @graphql.Args() args: DeleteStudentWalletArgs
  ): Promise<StudentWallet | null> {
    try {
      return await this.service.deleteStudentWallet(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Transaction], { name: "transactions" })
  @nestAccessControl.UseRoles({
    resource: "Transaction",
    action: "read",
    possession: "any",
  })
  async findTransactions(
    @graphql.Parent() parent: StudentWallet,
    @graphql.Args() args: TransactionFindManyArgs
  ): Promise<Transaction[]> {
    const results = await this.service.findTransactions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
