/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  StudentWallet as PrismaStudentWallet,
  Transaction as PrismaTransaction,
} from "@prisma/client";

export class StudentWalletServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StudentWalletCountArgs, "select">
  ): Promise<number> {
    return this.prisma.studentWallet.count(args);
  }

  async studentWallets<T extends Prisma.StudentWalletFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentWalletFindManyArgs>
  ): Promise<PrismaStudentWallet[]> {
    return this.prisma.studentWallet.findMany<Prisma.StudentWalletFindManyArgs>(
      args
    );
  }
  async studentWallet<T extends Prisma.StudentWalletFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentWalletFindUniqueArgs>
  ): Promise<PrismaStudentWallet | null> {
    return this.prisma.studentWallet.findUnique(args);
  }
  async createStudentWallet<T extends Prisma.StudentWalletCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentWalletCreateArgs>
  ): Promise<PrismaStudentWallet> {
    return this.prisma.studentWallet.create<T>(args);
  }
  async updateStudentWallet<T extends Prisma.StudentWalletUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentWalletUpdateArgs>
  ): Promise<PrismaStudentWallet> {
    return this.prisma.studentWallet.update<T>(args);
  }
  async deleteStudentWallet<T extends Prisma.StudentWalletDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentWalletDeleteArgs>
  ): Promise<PrismaStudentWallet> {
    return this.prisma.studentWallet.delete(args);
  }

  async findTransactions(
    parentId: string,
    args: Prisma.TransactionFindManyArgs
  ): Promise<PrismaTransaction[]> {
    return this.prisma.studentWallet
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .transactions(args);
  }
}
