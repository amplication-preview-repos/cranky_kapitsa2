/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AdminWallet } from "./AdminWallet";
import { AdminWalletCountArgs } from "./AdminWalletCountArgs";
import { AdminWalletFindManyArgs } from "./AdminWalletFindManyArgs";
import { AdminWalletFindUniqueArgs } from "./AdminWalletFindUniqueArgs";
import { CreateAdminWalletArgs } from "./CreateAdminWalletArgs";
import { UpdateAdminWalletArgs } from "./UpdateAdminWalletArgs";
import { DeleteAdminWalletArgs } from "./DeleteAdminWalletArgs";
import { ListAllWalletsOutput } from "../ListAllWalletsOutput";
import { AdminWalletService } from "../adminWallet.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AdminWallet)
export class AdminWalletResolverBase {
  constructor(
    protected readonly service: AdminWalletService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AdminWallet",
    action: "read",
    possession: "any",
  })
  async _adminWalletsMeta(
    @graphql.Args() args: AdminWalletCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AdminWallet])
  @nestAccessControl.UseRoles({
    resource: "AdminWallet",
    action: "read",
    possession: "any",
  })
  async adminWallets(
    @graphql.Args() args: AdminWalletFindManyArgs
  ): Promise<AdminWallet[]> {
    return this.service.adminWallets(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AdminWallet, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AdminWallet",
    action: "read",
    possession: "own",
  })
  async adminWallet(
    @graphql.Args() args: AdminWalletFindUniqueArgs
  ): Promise<AdminWallet | null> {
    const result = await this.service.adminWallet(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AdminWallet)
  @nestAccessControl.UseRoles({
    resource: "AdminWallet",
    action: "create",
    possession: "any",
  })
  async createAdminWallet(
    @graphql.Args() args: CreateAdminWalletArgs
  ): Promise<AdminWallet> {
    return await this.service.createAdminWallet({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AdminWallet)
  @nestAccessControl.UseRoles({
    resource: "AdminWallet",
    action: "update",
    possession: "any",
  })
  async updateAdminWallet(
    @graphql.Args() args: UpdateAdminWalletArgs
  ): Promise<AdminWallet | null> {
    try {
      return await this.service.updateAdminWallet({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AdminWallet)
  @nestAccessControl.UseRoles({
    resource: "AdminWallet",
    action: "delete",
    possession: "any",
  })
  async deleteAdminWallet(
    @graphql.Args() args: DeleteAdminWalletArgs
  ): Promise<AdminWallet | null> {
    try {
      return await this.service.deleteAdminWallet(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Query(() => String)
  async DepositMoneyMultipleWallets(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.DepositMoneyMultipleWallets(args);
  }

  @graphql.Query(() => String)
  async DepositMoneyMultipleWalletsAction(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.DepositMoneyMultipleWalletsAction(args);
  }

  @graphql.Query(() => String)
  async ListAllWallets(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.ListAllWallets(args);
  }

  @graphql.Query(() => [ListAllWalletsOutput])
  async ListAllWalletsAction(
    @graphql.Args()
    args: string
  ): Promise<ListAllWalletsOutput[]> {
    return this.service.ListAllWalletsAction(args);
  }

  @graphql.Query(() => String)
  async SendMoneyViaMpesa(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.SendMoneyViaMpesa(args);
  }

  @graphql.Query(() => String)
  async SendMoneyViaMpesaAction(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.SendMoneyViaMpesaAction(args);
  }
}
