/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AdminWalletService } from "../adminWallet.service";
import { AdminWalletCreateInput } from "./AdminWalletCreateInput";
import { AdminWallet } from "./AdminWallet";
import { AdminWalletFindManyArgs } from "./AdminWalletFindManyArgs";
import { AdminWalletWhereUniqueInput } from "./AdminWalletWhereUniqueInput";
import { AdminWalletUpdateInput } from "./AdminWalletUpdateInput";
import { ListAllWalletsOutput } from "../ListAllWalletsOutput";

export class AdminWalletControllerBase {
  constructor(protected readonly service: AdminWalletService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AdminWallet })
  async createAdminWallet(
    @common.Body() data: AdminWalletCreateInput
  ): Promise<AdminWallet> {
    return await this.service.createAdminWallet({
      data: data,
      select: {
        createdAt: true,
        dailyCap: true,
        id: true,
        monthlyCap: true,
        totalBalance: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AdminWallet] })
  @ApiNestedQuery(AdminWalletFindManyArgs)
  async adminWallets(@common.Req() request: Request): Promise<AdminWallet[]> {
    const args = plainToClass(AdminWalletFindManyArgs, request.query);
    return this.service.adminWallets({
      ...args,
      select: {
        createdAt: true,
        dailyCap: true,
        id: true,
        monthlyCap: true,
        totalBalance: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AdminWallet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async adminWallet(
    @common.Param() params: AdminWalletWhereUniqueInput
  ): Promise<AdminWallet | null> {
    const result = await this.service.adminWallet({
      where: params,
      select: {
        createdAt: true,
        dailyCap: true,
        id: true,
        monthlyCap: true,
        totalBalance: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AdminWallet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAdminWallet(
    @common.Param() params: AdminWalletWhereUniqueInput,
    @common.Body() data: AdminWalletUpdateInput
  ): Promise<AdminWallet | null> {
    try {
      return await this.service.updateAdminWallet({
        where: params,
        data: data,
        select: {
          createdAt: true,
          dailyCap: true,
          id: true,
          monthlyCap: true,
          totalBalance: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AdminWallet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAdminWallet(
    @common.Param() params: AdminWalletWhereUniqueInput
  ): Promise<AdminWallet | null> {
    try {
      return await this.service.deleteAdminWallet({
        where: params,
        select: {
          createdAt: true,
          dailyCap: true,
          id: true,
          monthlyCap: true,
          totalBalance: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/deposit-money-multiple-wallets")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async DepositMoneyMultipleWallets(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.DepositMoneyMultipleWallets(body);
  }

  @common.Get("/:id/deposit-money-multiple-wallets-action")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async DepositMoneyMultipleWalletsAction(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.DepositMoneyMultipleWalletsAction(body);
  }

  @common.Get("/:id/list-all-wallets")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ListAllWallets(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.ListAllWallets(body);
  }

  @common.Get("/all-wallets")
  @swagger.ApiOkResponse({
    type: ListAllWalletsOutput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ListAllWalletsAction(
    @common.Body()
    body: string
  ): Promise<ListAllWalletsOutput[]> {
    return this.service.ListAllWalletsAction(body);
  }

  @common.Get("/:id/send-money-via-mpesa")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async SendMoneyViaMpesa(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.SendMoneyViaMpesa(body);
  }

  @common.Get("/:id/send-money-via-mpesa-action")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async SendMoneyViaMpesaAction(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.SendMoneyViaMpesaAction(body);
  }
}
