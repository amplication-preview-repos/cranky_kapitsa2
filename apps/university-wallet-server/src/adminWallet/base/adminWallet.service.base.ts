/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AdminWallet as PrismaAdminWallet } from "@prisma/client";
import { ListAllWalletsOutput } from "../ListAllWalletsOutput";

export class AdminWalletServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AdminWalletCountArgs, "select">
  ): Promise<number> {
    return this.prisma.adminWallet.count(args);
  }

  async adminWallets<T extends Prisma.AdminWalletFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdminWalletFindManyArgs>
  ): Promise<PrismaAdminWallet[]> {
    return this.prisma.adminWallet.findMany<Prisma.AdminWalletFindManyArgs>(
      args
    );
  }
  async adminWallet<T extends Prisma.AdminWalletFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdminWalletFindUniqueArgs>
  ): Promise<PrismaAdminWallet | null> {
    return this.prisma.adminWallet.findUnique(args);
  }
  async createAdminWallet<T extends Prisma.AdminWalletCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdminWalletCreateArgs>
  ): Promise<PrismaAdminWallet> {
    return this.prisma.adminWallet.create<T>(args);
  }
  async updateAdminWallet<T extends Prisma.AdminWalletUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdminWalletUpdateArgs>
  ): Promise<PrismaAdminWallet> {
    return this.prisma.adminWallet.update<T>(args);
  }
  async deleteAdminWallet<T extends Prisma.AdminWalletDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdminWalletDeleteArgs>
  ): Promise<PrismaAdminWallet> {
    return this.prisma.adminWallet.delete(args);
  }
  async DepositMoneyMultipleWallets(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async DepositMoneyMultipleWalletsAction(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async ListAllWallets(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async ListAllWalletsAction(args: string): Promise<ListAllWalletsOutput[]> {
    throw new Error("Not implemented");
  }
  async SendMoneyViaMpesa(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async SendMoneyViaMpesaAction(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
